import{c as T}from"./react-_sXfQCJm.js";function k(i,a){let r;try{r=i()}catch{return}return{getItem:o=>{var t;const f=m=>m===null?null:JSON.parse(m,void 0),u=(t=r.getItem(o))!=null?t:null;return u instanceof Promise?u.then(f):f(u)},setItem:(o,t)=>r.setItem(o,JSON.stringify(t,void 0)),removeItem:o=>r.removeItem(o)}}const S=i=>a=>{try{const r=i(a);return r instanceof Promise?r:{then(n){return S(n)(r)},catch(n){return this}}}catch(r){return{then(n){return this},catch(n){return S(n)(r)}}}},A=(i,a)=>(r,n,o)=>{let t={storage:k(()=>localStorage),partialize:e=>e,version:0,merge:(e,h)=>({...h,...e}),...a},f=!1;const u=new Set,m=new Set;let c=t.storage;if(!c)return i((...e)=>{console.warn(`[zustand persist middleware] Unable to update item '${t.name}', the given storage is currently unavailable.`),r(...e)},n,o);const p=()=>{const e=t.partialize({...n()});return c.setItem(t.name,{state:e,version:t.version})},_=o.setState;o.setState=(e,h)=>{_(e,h),p()};const v=i((...e)=>{r(...e),p()},n,o);o.getInitialState=()=>v;let d;const I=()=>{var e,h;if(!c)return;f=!1,u.forEach(s=>{var l;return s((l=n())!=null?l:v)});const g=((h=t.onRehydrateStorage)==null?void 0:h.call(t,(e=n())!=null?e:v))||void 0;return S(c.getItem.bind(c))(t.name).then(s=>{if(s)if(typeof s.version=="number"&&s.version!==t.version){if(t.migrate){const l=t.migrate(s.state,s.version);return l instanceof Promise?l.then(y=>[!0,y]):[!0,l]}console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}else return[!1,s.state];return[!1,void 0]}).then(s=>{var l;const[y,b]=s;if(d=t.merge(b,(l=n())!=null?l:v),r(d,!0),y)return p()}).then(()=>{g==null||g(d,void 0),d=n(),f=!0,m.forEach(s=>s(d))}).catch(s=>{g==null||g(void 0,s)})};return o.persist={setOptions:e=>{t={...t,...e},e.storage&&(c=e.storage)},clearStorage:()=>{c==null||c.removeItem(t.name)},getOptions:()=>t,rehydrate:()=>I(),hasHydrated:()=>f,onHydrate:e=>(u.add(e),()=>{u.delete(e)}),onFinishHydration:e=>(m.add(e),()=>{m.delete(e)})},t.skipHydration||I(),d||v},H=A,R=T(H(i=>({accessToken:null,refreshToken:null,isActive:!1,isLoggedIn:!1,permissions:null,role:null,branchcode:null,staff_id:null,setAuthData:a=>i({staff_id:a.staff_id,branchcode:a.branchcode,accessToken:a.accessToken,refreshToken:a.refreshToken,isActive:a.isActive,permissions:a.permissions,isLoggedIn:!0,role:a.role}),clearAuthData:()=>i({accessToken:null,refreshToken:null,isActive:!1,permissions:null,isLoggedIn:!1,role:null})}),{name:"auth-storage",storage:k(()=>localStorage)}));export{H as p,R as u};
